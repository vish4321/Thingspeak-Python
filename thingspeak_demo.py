import random
line = '-'*15
print('\nWelcome to the interactive demo for this Thingspeak API module in Python.')
print('This will take you through the important functions and variables in this module.')
print('When you see a blinking cursor, press ENTER once to continue.')
input()
print('Although this was written to be used with TF2.0 Object Detection API and the DOTA dataset, it can be used for any Thingspeak application that involves sending messages sequentially from a predefined pool of <99 messages.')
input()
print('Through the course of this demo, I will be showing lines of code prefixed by the \'>>>\' symbol.')
print('The result you see would be as though you had run the code in the interpreter, or in another script.')
print('The end of the code output is marked by \'' + line + '\'')
input()
print('\n')


print('TUTORIAL\n')
print('This module can be imported like regular python packages. It contains only one class, channel().\n')
print('>>> import thingspeak')
print('>>> c = thingspeak.channel()')
input()
import thingspeak
c = thingspeak.channel()
print(line)
input()
print('This initialises the channel handler, using Thingspeak parameters defined at the top of the script. Here are the names and values of those parameters:\n')
print('>>> c.channel_ID')
print('>>> c.read_API')
print('>>> c.write_API')
print('>>> c.clear_API')
input()
print(c.channel_ID)
print(c.read_API)
print(c.write_API)
print(c.clear_API)
print(line)
input()
print('These parameters uniquely identify a Thingspeak channel. They are special credentials that can be used along with the HTTP GET request to read to, write from, and clear a channel.')
input()
print('There is one more input the API needs - the label map.\n')
print('>>> c.label_map')
input()
print(c.label_map)
print(line)
input()
print('This label map is a pool of predefined messages that all participating entities must have. Only the indices are sent to the Thingspeak channel, and converting those numbers back to messages is done locally. This makes storage much more efficient, since entire strings may be represented by a unique two digit number.')
input()
print('Now, let us start with a clear channel and proceed to add data to that.\n')
print('>>> c.clear()')
input()
c.clear()
print(line)
input()
print('Since our browser is capable of sending HTTP GET requests, we should be able to use it to read data from our channel. Luckily, the URL that needs to be entered is stored already.\n')
print('>>> c.read_url')
input()
print(c.read_url)
print(line)
print('Enter the URL above into your browser window. Preferable one that formats JSON objects, like Firefox, because Thingspeak primarily sends and receives data using JSON objects (though XML can also be used.)')
input()
print('We see that the channel is empty. So, time to add some data.')
while True:
    try:
        temp = int(input('\nPick a suitable index from the label map and enter it here: '))
    except:
        print('\tThat wasn\'t an integer! Try again.')
    else:
        if temp > (len(c.label_map)-1):
            print('\tIndex out of bounds! Try again.')
        else:
            break

print('>>> c.send(' + str(temp) + ')')
input()
c.send(int(temp))
print(line)
print('This adds the index to buffer.')
input()
print('You can confirm that this is indeed the string indexed by the value you entered.\n')
print('>>> c.label_map['+str(temp)+']')
input()
print(c.label_map[int(temp)])
print(line)
input()
print('We could also just send a string directly')
while True:
    try:
        temp = int(input('\nPick a suitable index from the label map and enter it here: '))
    except:
        print('\tThat wasn\'t an integer! Try again.')
    else:
        if temp > (len(c.label_map)-1):
            print('\tIndex out of bounds! Try again.')
        else:
            break
print('\nThat index corresponds to \''+c.label_map[int(temp)]+'\'\n')
print('>>> c.send(\''+c.label_map[int(temp)]+'\')')
input()
c.send(c.label_map[int(temp)])
print(line)
input()
print('We can see the contents of our buffer at any time using this command:')
print('>>> c.itemlist')
input()
print(c.itemlist)
print(line)
input()
print('Let\'s add data one more time, but using a loop.\n')
input()
while True:
    try:
        num = int(input('\nPick a suitable index from the label map and enter it here: '))
    except:
        print('\tThat wasn\'t an integer! Try again.')
    else:
        if num > (len(c.label_map)-1):
            print('\tIndex out of bounds! Try again.')
        else:
            break
times = input('Enter the number of times you want that message to be sent (anything lesser than 593, but keep it small. <20 should do): ')
print('>>> for i in range('+str(times)+'):')
print('...\tc.send('+str(num)+')')
input()
for i in range(int(times)):
        c.send(int(num))
print(line)
input()
print('We can see our buffer has changed:')
print('>>> c.itemlist')
input()
print(c.itemlist)
print(line)
input()
print('Now, let\'s write this manually into the Thingspeak channel.\n')
print('>>> c.transmit()')
input()
c.transmit()
print(line)
input()
print('At this point, go back to your browser and refresh the page. What do you see?\n')
input()
print('If you would like to see the cumulative number of messages sent, run this command:')
print('>>> c.numberOfMessages')
input()
print(c.numberOfMessages)
print(line)
input()
print('This is the value stored in field8 of a Thingspeak entry; field8 stores the cumulative total of all messages sent, not an individual total within a single Thingspeak entry.')
input()
print('The buffer has also been cleared.')
print('>>> c.itemlist')
input()
print(c.itemlist)
print(line)
input()
print('A quick example, let\'s see what happens when there is a buffer overflow.\n')
input()
while True:
    try:
        temp = int(input('\nPick a suitable index from the label map and enter it here: '))
    except:
        print('\tThat wasn\'t an integer! Try again.')
    else:
        if temp > (len(c.label_map)-1):
            print('\tIndex out of bounds! Try again.')
        else:
            break
print('Let\'s send that 600 times. The max buffer size is 594')
print('>>> for i in range(600):')
print('...\tc.send('+str(temp)+')')
input()
for i in range(600):
        c.send(int(temp))
print(line)
input()
print('Note the console output - there was a small interruption, during which a packaged Thingspeak entry was transmitted.')
input()
print('Refresh the browser page again, and note the new entry.')
input()
print('We can see that the leftover messages have been added to the buffer:')
print('>>> c.itemlist')
input()
print(c.itemlist)
print(line)
input()
print('Let us add some more random elements.')
input()
a = random.randint(1,6)
b = random.randint(1,3)
d = random.randint(1,15)
e = random.randint(1,15)
print('>>> for i in range('+str(a)+'):')
print('...\tfor j in range('+str(b)+'):')
print('...\t\tc.send('+str(d)+')')
print('...\t\tc.send('+str(d)+')')
print('...\t\tc.send('+str(e)+')')
input()
for i in range(a):
    for j in range(b):
        c.send(d)
        c.send(d)
        c.send(e)

print(line)
input()
print('Now let\'s transmit this message.\n')
print('>>> c.transmit()')
input()
c.transmit()
print(line)
input()
print('If you have kept track of the number of messages sent, cross check it now against the counter variable:')
print('>>> c.numberOfMessages')
input()
print(c.numberOfMessages)
print(line)
input()
print('Now let us move on to getting data from the channel.')
input()
print('The get() method returns a pairwise mapping of the label (corresponding to the index) and number of occurrences across all Thingspeak entries.')
input()
print('>>> c.get()')
input()
print(c.get())
print(line)
input()
print('This method actually returns a python dictionary structure, which can be manipulated in a variety of ways. Two of those are already implemented:')
input()
print('>>> c.get_table()')
input()
c.get_table()
print(line)
input()
print('Or as a bar graph.')
input()
print('>>> c.get_img()')
input()
c.get_img()
print(line)
input()
print('\nThis is the end of the demo.')
input()
